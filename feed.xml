<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator><link href="https://portfolio.rothellc.com/feed.xml" rel="self" type="application/atom+xml"/><link href="https://portfolio.rothellc.com/" rel="alternate" type="text/html" hreflang="en"/><updated>2025-09-27T02:08:00+00:00</updated><id>https://portfolio.rothellc.com/feed.xml</id><title type="html">blank</title><subtitle>Senior engineer at Lockheed Martin with M.S. in Electrical Engineering from Johns Hopkins University. Specializes in FPGA firmware design with experience in electrical and mechanical hardware as well as software development. </subtitle><entry><title type="html">Setting Up a WireGuard VPN Client on Linux</title><link href="https://portfolio.rothellc.com/blog/2025/setting-up-a-wireguard-vpn-client-on-linux/" rel="alternate" type="text/html" title="Setting Up a WireGuard VPN Client on Linux"/><published>2025-09-27T00:00:00+00:00</published><updated>2025-09-27T00:00:00+00:00</updated><id>https://portfolio.rothellc.com/blog/2025/setting-up-a-wireguard-vpn-client-on-linux</id><content type="html" xml:base="https://portfolio.rothellc.com/blog/2025/setting-up-a-wireguard-vpn-client-on-linux/"><![CDATA[<p>Setting up a WireGuard VPN for privacy and security involves setting up both server and client side systems. This guide explains how to set up a client side Linux system - with or without <a href="https://pi-hole.net/">Pi-hole DNS filtering</a> on the home network - and then configure the system so that WireGuard settings will switch depending on if the client system is on the home network or not. This is necessary because the WireGuard client will break your network connection if you are on your home network, and there is no need to manually switch your VPN client on and off when automation exists.</p> <p>This guide assumes a <a href="https://www.wireguard.com/quickstart/">WireGuard VPN server</a> is set up, and port forwarding is configured on the home router. This guide is also written for Linux Mint - while this should also work for most Debian systems, you may need to modify some filepaths depending on your distro.</p> <hr/> <h2 id="background">Background</h2> <p>VPNs are a great tool for security and privacy, with key benefits being:</p> <p><strong>Privacy and Security:</strong></p> <ul> <li><strong>Location Privacy</strong>: All traffic appears to be from your home IP address. Your actual location is obscured to anyone tracking your browsing activity.</li> <li><strong>Data Protection</strong>: On public wireless networks, your VPN tunnel ensures packet sniffers and other malicious actors can’t see your activity.</li> <li><strong>Audited:</strong> WireGuard is open source and is <a href="https://courses.csail.mit.edu/6.857/2018/project/He-Xu-Xu-WireGuard.pdf">audited regularly</a> by both organizations and individuals. All of its code is viewable by any developer curious enough to know how it functions.</li> </ul> <p><strong>Functionality:</strong></p> <ul> <li><strong>Ad Blocking:</strong> If you run a <a href="https://pi-hole.net/">Pi-Hole</a> system at home for ad blocking, you can use that same tool while off your home network.</li> <li><strong>Home Network Access:</strong> This secure tunnel to your home network means you can access devices on your home network such as cameras, NAS systems, and IoT devices without needing to expose them to the internet.</li> <li><strong>Speed:</strong> <a href="https://www.wireguard.com/performance/">WireGuard is fast</a>, faster than most other comparable VPN services.</li> </ul> <p><strong>Practicality:</strong></p> <ul> <li><strong>Low Overhead:</strong> Works on virtually all modern hardware.</li> <li><strong>Cryptographically Secure:</strong> Uses proven, modern cryptographic primitives detailed on the <a href="https://www.wireguard.com/">WireGuard homepage</a>.</li> <li><strong>Free:</strong> Self explanatory. No risk of subscription fees in the future, either. Open source comes with benefits!</li> </ul> <p>If you do not have a WireGuard VPN server set up and find this interesting, I’ve worked through the <a href="https://www.wireguard.com/quickstart/">official WireGuard documentation</a> and found it more than sufficient. Make sure this is complete before setting up clients! Windows and MacOS have <a href="https://www.wireguard.com/install/">dedicated programs</a> for clients, but Linux is a bit more complicated; hence this guide.</p> <hr/> <h2 id="prerequisites">Prerequisites</h2> <ul> <li>WireGuard server, configured with port forwarding on your home router.</li> <li>Linux client with <code class="language-plaintext highlighter-rouge">sudo</code> access (tested here on Mint/Debian).</li> <li>Basic command line familiarity.</li> </ul> <hr/> <h2 id="client-setup">Client Setup</h2> <h3 id="ssh-key-generation">SSH Key Generation</h3> <p>This process should be familiar (for general server access, not WireGuard-specific handshakes), but direction is provided below just in case. On the client, run:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ssh-keygen <span class="nt">-t</span> ed25519 <span class="nt">-C</span> <span class="s2">"your-email@example.com"</span>
</code></pre></div></div> <p>Hit enter twice - use default location and no passkey (unless you really want one).</p> <p>There are two ways to copy your key to the server, the <strong>Easy Way</strong> and the <strong>More Likely Way</strong>.</p> <hr/> <div class="row"> <div class="col-md-6"> <h4 id="the-easy-way">The Easy Way:</h4> <p>The easy way only works if your client can access the server. Since we are generating keys, you should probably have password authentication enabled for SSH. In case you forgot, you modify these lines in <code class="language-plaintext highlighter-rouge">/etc/ssh/sshd_config</code>:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>PasswordAuthentication no
PubkeyAuthentication <span class="nb">yes
</span>PermitRootLogin no
</code></pre></div> </div> <p>Then on the client side you can simply run:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ssh-copy-id username@server-ip
</code></pre></div> </div> <p>This copies SSH key settings to the host, if security settings allow it.</p> </div> <div class="col-md-6"> <h4 id="the-more-likely-way">The More Likely Way:</h4> <p>Run this on the client:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cat</span> ~/.ssh/id_ed25519.pub
</code></pre></div> </div> <p>Get this clipboard item to the server however you like, probably using another system that does have SSH access, and append it to <code class="language-plaintext highlighter-rouge">~/.ssh/authorized_keys</code>. No need to disable the server’s security requirements this way.</p> </div> </div> <hr/> <h3 id="installation">Installation</h3> <p>Run on the client to install necessary dependencies:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>apt update
<span class="nb">sudo </span>apt <span class="nb">install </span>wireguard resolvconf
</code></pre></div></div> <p>Once that is done, generate WireGuard keys (these are different than SSH keys - the former are needed to access the WireGuard server for configuration):</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cd</span> /etc/wireguard
<span class="nb">sudo umask </span>077
<span class="nb">sudo </span>wg genkey | <span class="nb">sudo tee </span>privatekey | <span class="nb">sudo </span>wg pubkey | <span class="nb">sudo tee </span>publickey
</code></pre></div></div> <p>Next, create the WireGuard config file on your client using:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>vim /etc/wireguard/wg0.conf
</code></pre></div></div> <p>And insert the following text to create your client’s WireGuard network configuration file. This facilites the key handshake your client system will do with the server:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>Interface]
PrivateKey <span class="o">=</span> <span class="c"># Paste the contents of /etc/wireguard/privatekey here</span>
Address <span class="o">=</span> 10.0.0.2/24
DNS <span class="o">=</span> 1.1.1.1

<span class="o">[</span>Peer]
PublicKey <span class="o">=</span> <span class="c"># Your server's public key goes here.</span>
Endpoint <span class="o">=</span> your-server-ip:51820
AllowedIPs <span class="o">=</span> 0.0.0.0/0
PersistentKeepalive <span class="o">=</span> 25
</code></pre></div></div> <p>Note that you have three items to fill in above. You will need the PublicKey from the server, not from what you have here on the client. So hold off on that for now.</p> <p>The private key on the client can be acquired using:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo cat</span> /etc/wireguard/privatekey
</code></pre></div></div> <p>The public key on the client (which will be needed on the server) can be acquired using:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo cat</span> /etc/wireguard/publickey
</code></pre></div></div> <p>Now SSH into the WireGuard server, and edit the WireGuard config using:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>vim /etc/wireguard/wg0.conf
</code></pre></div></div> <p>Append the following to the file:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>Peer]
PublicKey <span class="o">=</span> <span class="c"># Paste your client's public key here.</span>
AllowedIPs <span class="o">=</span> 10.0.0.x/32
</code></pre></div></div> <p>For <code class="language-plaintext highlighter-rouge">AllowedIPs</code>, you will need to replace the <code class="language-plaintext highlighter-rouge">x</code>. For my setup, the server was .1, and I had two previous clients taking up .2 and .3, so I used .4. These are the IPs the WireGuard server uses to identify the peers on its network.</p> <p>Back on the client, edit the client’s WireGuard config using:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>vim /etc/wireguard/wg0.conf
</code></pre></div></div> <p>Remember how we didn’t have the server’s public key last time? Fix that now:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>Interface]
PrivateKey <span class="o">=</span> <span class="c"># Paste(d) the contents of /etc/wireguard/privatekey here</span>
Address <span class="o">=</span> 10.0.0.2/24
DNS <span class="o">=</span> 1.1.1.1

<span class="o">[</span>Peer]
PublicKey <span class="o">=</span> <span class="c"># Your server's public key goes here.</span>
Endpoint <span class="o">=</span> your-server-ip:51820
AllowedIPs <span class="o">=</span> 0.0.0.0/0
PersistentKeepalive <span class="o">=</span> 25
</code></pre></div></div> <p>Three items to check, above. Make sure the <code class="language-plaintext highlighter-rouge">Address</code> on your client side matches <code class="language-plaintext highlighter-rouge">AllowedIps</code> on the server side.</p> <hr/> <h3 id="dual-wireguard-configurations">Dual Wireguard Configurations</h3> <p>If you start WireGuard on your home network now, it will fail. You need to configure something that will turn it off when you are on your home network. Fortunately, we have good tools for this.</p> <p>On your client side, run:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo cp</span> /etc/wireguard/wg0.conf /etc/wireguard/wg0-away.conf
<span class="nb">sudo cp</span> /etc/wireguard/wg0.conf /etc/wireguard/wg0-home.conf
</code></pre></div></div> <p>Both of these files will become your home and away configurations, which will be copied into <code class="language-plaintext highlighter-rouge">wg0.conf</code> when your client detects a network change.</p> <p>Edit the home configuration using:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>vim /etc/wireguard/wg0-home.conf
</code></pre></div></div> <p>The only change you need to make below is to AllowedIPs: <code class="language-plaintext highlighter-rouge">your-local-ip</code> (e.g. 192.168.1.0/24) is critical here, as you want the initial <code class="language-plaintext highlighter-rouge">192.168.1.*</code> to match the home network IPs your router issues. Also, don’t forget to adjust <code class="language-plaintext highlighter-rouge">Address</code> if needed.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>Interface]
PrivateKey <span class="o">=</span> <span class="c"># Your laptop's private key.</span>
Address <span class="o">=</span> 10.0.0.2/24
DNS <span class="o">=</span> 1.1.1.1 <span class="c"># Or 192.168.1.xxx for Pi-Hole.</span>

<span class="o">[</span>Peer]
PublicKey <span class="o">=</span> <span class="c"># Your server's public key.</span>
Endpoint <span class="o">=</span> your-server-local-ip:51820
AllowedIPs <span class="o">=</span> your-local-ip/24
PersistentKeepalive <span class="o">=</span> 25
</code></pre></div></div> <p>Next, the away config should be edited using:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>vim /etc/wireguard/wg0-away.conf
</code></pre></div></div> <p>And should contain:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>Interface]
PrivateKey <span class="o">=</span> <span class="c"># Your laptop's private key.</span>
Address <span class="o">=</span> 10.0.0.2/24
DNS <span class="o">=</span> 1.1.1.1 <span class="c"># Or 192.168.1.xxx for Pi-Hole.</span>

<span class="o">[</span>Peer]
PublicKey <span class="o">=</span> <span class="c"># Your server's public key.</span>
Endpoint <span class="o">=</span> your-server-external-ip:51820
AllowedIPs <span class="o">=</span> 0.0.0.0/0
PersistentKeepalive <span class="o">=</span> 25
</code></pre></div></div> <p>Note for above, you need your server’s external IP. This will be your home router’s IP, port forwarded to your VPN server. This was likely set up when the WireGuard server was set up, and you only need a service like <a href="https://whatismyip.com">this</a> to check your external IP.</p> <p>As a reminder, these two <code class="language-plaintext highlighter-rouge">wg0-*</code> scripts will replace wg0.conf dynamically depending on what network the client is on. This will be triggered by the detection script, which we will now build.</p> <hr/> <h3 id="detection-script">Detection Script</h3> <p>Run:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>vim /etc/NetworkManager/dispatcher.d/99-wireguard-auto
</code></pre></div></div> <p>Add the following, adjusting the <code class="language-plaintext highlighter-rouge">HOME_*</code> values as needed:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/bin/bash</span>

<span class="nv">INTERFACE</span><span class="o">=</span><span class="nv">$1</span>
<span class="nv">ACTION</span><span class="o">=</span><span class="nv">$2</span>

<span class="c"># Filter out interfaces we don't care about (loopback, virtual bridges, docker).</span>
<span class="k">case</span> <span class="s2">"</span><span class="nv">$INTERFACE</span><span class="s2">"</span> <span class="k">in
    </span>lo|virbr<span class="k">*</span><span class="p">|</span>docker<span class="k">*</span><span class="p">|</span>br-<span class="k">*</span><span class="p">)</span>
        <span class="nb">exit </span>0
        <span class="p">;;</span>
<span class="k">esac</span>

<span class="nv">LOG_FILE</span><span class="o">=</span><span class="s2">"/var/log/wireguard-auto.log"</span>

log_message<span class="o">()</span> <span class="o">{</span>
    <span class="nb">echo</span> <span class="s2">"</span><span class="si">$(</span><span class="nb">date</span><span class="si">)</span><span class="s2">: [</span><span class="nv">$INTERFACE</span><span class="s2">/</span><span class="nv">$ACTION</span><span class="s2">] </span><span class="nv">$1</span><span class="s2">"</span> | <span class="nb">tee</span> <span class="nt">-a</span> <span class="s2">"</span><span class="nv">$LOG_FILE</span><span class="s2">"</span>
<span class="o">}</span>

<span class="c"># Only act on interface up/down events for primary connections.</span>
<span class="k">if</span> <span class="o">[</span> <span class="s2">"</span><span class="nv">$ACTION</span><span class="s2">"</span> <span class="o">!=</span> <span class="s2">"up"</span> <span class="o">]</span> <span class="o">&amp;&amp;</span> <span class="o">[</span> <span class="s2">"</span><span class="nv">$ACTION</span><span class="s2">"</span> <span class="o">!=</span> <span class="s2">"down"</span> <span class="o">]</span><span class="p">;</span> <span class="k">then
    </span><span class="nb">exit </span>0
<span class="k">fi</span>

<span class="c"># Skip if this is the WireGuard interface itself.</span>
<span class="k">if</span> <span class="o">[</span> <span class="s2">"</span><span class="nv">$INTERFACE</span><span class="s2">"</span> <span class="o">=</span> <span class="s2">"wg0"</span> <span class="o">]</span><span class="p">;</span> <span class="k">then
    </span><span class="nb">exit </span>0
<span class="k">fi

</span>log_message <span class="s2">"Network change detected on </span><span class="nv">$INTERFACE</span><span class="s2">"</span>

<span class="c"># Let network settle.</span>
<span class="nb">sleep </span>2

<span class="c"># Configuration. Change these as needed.</span>
<span class="nv">HOME_NETWORK_GATEWAY</span><span class="o">=</span><span class="s2">"192.168.1.1"</span> <span class="c"># Router's IP.</span>
<span class="nv">HOME_WIREGUARD_SERVER</span><span class="o">=</span><span class="s2">"192.168.1.114"</span> <span class="c"># WireGuard server IP.</span>
<span class="nv">WG_INTERFACE</span><span class="o">=</span><span class="s2">"wg0"</span>

is_home_network<span class="o">()</span> <span class="o">{</span>
    <span class="c"># Check if home gateway is reachable.</span>
    <span class="k">if </span>ping <span class="nt">-c</span> 1 <span class="nt">-W</span> 3 <span class="s2">"</span><span class="nv">$HOME_NETWORK_GATEWAY</span><span class="s2">"</span> <span class="o">&gt;</span>/dev/null 2&gt;&amp;1<span class="p">;</span> <span class="k">then</span>
        <span class="c"># Double-check by pinging WireGuard server directly.</span>
        <span class="k">if </span>ping <span class="nt">-c</span> 1 <span class="nt">-W</span> 3 <span class="s2">"</span><span class="nv">$HOME_WIREGUARD_SERVER</span><span class="s2">"</span> <span class="o">&gt;</span>/dev/null 2&gt;&amp;1<span class="p">;</span> <span class="k">then</span>
            <span class="c"># Triple-check by seeing if our IP is in the home range.</span>
            <span class="nv">local_ip</span><span class="o">=</span><span class="si">$(</span>ip route get 8.8.8.8 2&gt;/dev/null | <span class="nb">awk</span> <span class="s1">'{print $7; exit}'</span><span class="si">)</span>
            <span class="k">if</span> <span class="o">[[</span> <span class="s2">"</span><span class="nv">$local_ip</span><span class="s2">"</span> <span class="o">=</span>~ ^192<span class="se">\.</span>168<span class="se">\.</span>1<span class="se">\.</span> <span class="o">]]</span><span class="p">;</span> <span class="k">then
                return </span>0 <span class="c"># Home.</span>
            <span class="k">fi
        fi
    fi
    return </span>1 <span class="c"># Away.</span>
<span class="o">}</span>

get_wg_status<span class="o">()</span> <span class="o">{</span>
    <span class="k">if </span>systemctl is-active <span class="nt">--quiet</span> wg-quick@wg0<span class="p">;</span> <span class="k">then
        </span><span class="nb">echo</span> <span class="s2">"active"</span>
    <span class="k">else
        </span><span class="nb">echo</span> <span class="s2">"inactive"</span>
    <span class="k">fi</span>
<span class="o">}</span>

copy_config<span class="o">()</span> <span class="o">{</span>
    <span class="nb">local source</span><span class="o">=</span><span class="s2">"</span><span class="nv">$1</span><span class="s2">"</span>
    <span class="k">if</span> <span class="o">[</span> <span class="nt">-f</span> <span class="s2">"</span><span class="nv">$source</span><span class="s2">"</span> <span class="o">]</span><span class="p">;</span> <span class="k">then
        </span><span class="nb">cp</span> <span class="s2">"</span><span class="nv">$source</span><span class="s2">"</span> /etc/wireguard/wg0.conf
        log_message <span class="s2">"Copied </span><span class="nv">$source</span><span class="s2"> to wg0.conf"</span>
        <span class="k">return </span>0
    <span class="k">else
        </span>log_message <span class="s2">"ERROR: </span><span class="nv">$source</span><span class="s2"> not found!"</span>
        <span class="k">return </span>1
    <span class="k">fi</span>
<span class="o">}</span>

<span class="c"># Only proceed if network connection is present.</span>
<span class="k">if</span> <span class="o">[</span> <span class="s2">"</span><span class="nv">$ACTION</span><span class="s2">"</span> <span class="o">=</span> <span class="s2">"up"</span> <span class="o">]</span><span class="p">;</span> <span class="k">then
    if </span>is_home_network<span class="p">;</span> <span class="k">then
        </span>log_message <span class="s2">"Detected home network."</span>
        <span class="nv">current_status</span><span class="o">=</span><span class="si">$(</span>get_wg_status<span class="si">)</span>
        
        <span class="k">if</span> <span class="o">[</span> <span class="s2">"</span><span class="nv">$current_status</span><span class="s2">"</span> <span class="o">=</span> <span class="s2">"active"</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
            <span class="c"># Check if using away config (away config has AllowedIPs = 0.0.0.0/0).</span>
            <span class="k">if </span><span class="nb">grep</span> <span class="nt">-q</span> <span class="s2">"AllowedIPs = 0.0.0.0/0"</span> /etc/wireguard/wg0.conf 2&gt;/dev/null<span class="p">;</span> <span class="k">then
                </span>log_message <span class="s2">"Switching to home VPN config."</span>
                systemctl stop wg-quick@wg0
                <span class="k">if </span>copy_config <span class="s2">"/etc/wireguard/wg0-home.conf"</span><span class="p">;</span> <span class="k">then
                    </span>systemctl start wg-quick@wg0
                <span class="k">fi
            else
                </span>log_message <span class="s2">"Already using home VPN config."</span>
            <span class="k">fi
        else
            </span>log_message <span class="s2">"Starting home VPN config."</span>
            <span class="k">if </span>copy_config <span class="s2">"/etc/wireguard/wg0-home.conf"</span><span class="p">;</span> <span class="k">then
                </span>systemctl start wg-quick@wg0
            <span class="k">fi
        fi
    else
        </span>log_message <span class="s2">"Detected external network."</span>
        <span class="nv">current_status</span><span class="o">=</span><span class="si">$(</span>get_wg_status<span class="si">)</span>
        
        <span class="k">if</span> <span class="o">[</span> <span class="s2">"</span><span class="nv">$current_status</span><span class="s2">"</span> <span class="o">=</span> <span class="s2">"active"</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
            <span class="c"># Check if we're using the home config (home config has restricted AllowedIPs).</span>
            <span class="k">if </span><span class="nb">grep</span> <span class="nt">-q</span> <span class="s2">"AllowedIPs = 192.168.1.0/24"</span> /etc/wireguard/wg0.conf 2&gt;/dev/null<span class="p">;</span> <span class="k">then
                </span>log_message <span class="s2">"Switching to away VPN config."</span>
                systemctl stop wg-quick@wg0
                <span class="k">if </span>copy_config <span class="s2">"/etc/wireguard/wg0-away.conf"</span><span class="p">;</span> <span class="k">then
                    </span>systemctl start wg-quick@wg0
                <span class="k">fi
            else
                </span>log_message <span class="s2">"Already using away VPN config."</span>
            <span class="k">fi
        else
            </span>log_message <span class="s2">"Starting away VPN config."</span>
            <span class="k">if </span>copy_config <span class="s2">"/etc/wireguard/wg0-away.conf"</span><span class="p">;</span> <span class="k">then
                </span>systemctl start wg-quick@wg0
            <span class="k">fi
        fi
    fi
elif</span> <span class="o">[</span> <span class="s2">"</span><span class="nv">$ACTION</span><span class="s2">"</span> <span class="o">=</span> <span class="s2">"down"</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
    <span class="c"># Uncomment the next line if wireguard should stop when network goes down.</span>
    <span class="c"># systemctl stop wg-quick@wg0</span>
    log_message <span class="s2">"Network disconnected."</span>
<span class="k">fi

</span><span class="nb">exit </span>0
</code></pre></div></div> <p>Once complete, make it executable:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo chmod</span> +x /etc/NetworkManager/dispatcher.d/99-wireguard-auto
</code></pre></div></div> <p>Then, add the following (adjust DNS IP as needed) using:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>vim /etc/NetworkManager/dispatcher.d/99-wireguard-dns.sh
</code></pre></div></div> <p>Add:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/bin/bash</span>

<span class="nv">INTERFACE</span><span class="o">=</span><span class="nv">$1</span>
<span class="nv">ACTION</span><span class="o">=</span><span class="nv">$2</span>

<span class="k">if</span> <span class="o">[[</span> <span class="s2">"</span><span class="nv">$INTERFACE</span><span class="s2">"</span> <span class="o">==</span> <span class="s2">"wg0"</span> <span class="o">&amp;&amp;</span> <span class="s2">"</span><span class="nv">$ACTION</span><span class="s2">"</span> <span class="o">==</span> <span class="s2">"up"</span> <span class="o">]]</span><span class="p">;</span> <span class="k">then</span>
    <span class="c"># Set Pi-hole as DNS server for WireGuard interface.</span>
    resolvectl dns wg0 192.168.1.223 <span class="c"># Change! Pi-Hole DNS address or 1.1.1.1 1.0.0.1 (Cloudflare) or 9.9.9.9 149.112.112.112 (Quad9)</span>
    resolvectl domain wg0 <span class="s2">"~."</span>
    
    <span class="c"># Remove default route from WiFi interface to prioritize VPN DNS.</span>
    resolvectl default-route &lt;replace-me&gt; <span class="nb">false</span>
    
    <span class="c"># Ensure only VPN has default route for DNS.</span>
    resolvectl default-route wg0 <span class="nb">true</span>
    
    <span class="c"># Flush DNS cache to apply changes.</span>
    resolvectl flush-caches
    
    logger <span class="s2">"WireGuard DNS configured: Pi-hole via VPN with WiFi DNS disabled."</span>
<span class="k">fi</span>
</code></pre></div></div> <p>To know what to enter in <code class="language-plaintext highlighter-rouge">&lt;replace-me&gt;</code>, run <code class="language-plaintext highlighter-rouge">ip link show</code>. You need your actual WiFI interface name here.</p> <p>Make it executable:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sudo chmod +x /etc/NetworkManager/dispatcher.d/99-wireguard-dns.sh
</code></pre></div></div> <p>To finalize, restart WireGuard on both machines. For the server first, run:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>systemctl restart wg-quick@wg0
</code></pre></div></div> <p>For the client, run:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>resolvectl default-route wlp4s0 <span class="nb">false
sudo </span>systemctl restart wg-quick@wg0
</code></pre></div></div> <p>This restarts WireGuard and fixes the initial VPN prioritization issue. Some Linux queries might go through your ISP’s DNS instead of the proper tunnel due to how systemd-resolve handles queries.</p> <hr/> <h3 id="troubleshooting">Troubleshooting</h3> <p>Check that everything is running properly. If Pi-Hole is running, execute the following to verify that it is blocking ad servers (skip if no Pi-Hole is involved):</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>nslookup doubleclick.net
nslookup googleadservices.com
</code></pre></div></div> <p>With Pi-Hole it should return <code class="language-plaintext highlighter-rouge">0.0.0.0</code>.</p> <h4 id="if-dns-is-not-working-with-pi-hole">If DNS is not working with Pi-Hole</h4> <p>Check if Pi-hole is reachable:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ping 192.168.1.223
</code></pre></div></div> <p>Verify the DNS script ran:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>journalctl <span class="nt">-u</span> NetworkManager <span class="nt">-f</span>
</code></pre></div></div> <p>Restart systemd-resolved:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>systemctl restart systemd-resolved
</code></pre></div></div> <h4 id="vpn-connects-but-no-internet">VPN connects, but no internet</h4> <p>Check routing:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ip route show
</code></pre></div></div> <h4 id="script-not-triggering-on-network-changes">Script not triggering on network changes</h4> <p>This might be an open-ended issue to debug, but here are some common items to try.</p> <p>Check if NetworkManager is running:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>systemctl status NetworkManager
</code></pre></div></div> <p>View logs:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo tail</span> <span class="nt">-f</span> /var/log/wireguard-auto.log
</code></pre></div></div> <hr/> <h2 id="conclusion">Conclusion</h2> <p>That should get you a working VPN client! If you notice any issues with this guide, please feel free to reach out or leave a comment.</p>]]></content><author><name>Joshua Rothe</name></author><category term="linux"/><category term="devops"/><category term="linux"/><category term="vpn"/><category term="wireguard"/><category term="pihole"/><category term="devops"/><summary type="html"><![CDATA[Guide for configuring a client-side Linux (debian) system for WireGuard VPN, automating network settings on both home and away networks.]]></summary></entry></feed>